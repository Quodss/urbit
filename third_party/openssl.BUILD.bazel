load(
    "@rules_foreign_cc//foreign_cc:defs.bzl",
    "configure_make",
    "configure_make_variant",
)

filegroup(
    name = "srcs",
    srcs = glob(
        include = ["**"],
        exclude = ["*.bazel"],
    ),
)

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

config_setting(
    name = "macos_aarch64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:aarch64",
    ],
)

CONFIGURE_OPTIONS = [
    "no-comp",
    "no-idea",
    "no-weak-ssl-ciphers",
    "no-shared",
]  # + select({
#    ":linux_x86_64": ["linux-x86_64"],
#    ":linux_aarch64": ["linux-aarch64"],
#    # "//conditions:default": "" # _DL_ENDIAN, etc.
# })

LIB_NAME = "openssl"

MAKE_TARGETS = [
    "build_libs",
    "install_dev",
]

config_setting(
    name = "msvc_compiler",
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "msvc-cl",
    },
    visibility = ["//visibility:public"],
)

alias(
    name = "openssl",
    actual = select({
        ":msvc_compiler": "openssl_msvc",
        "//conditions:default": "openssl_default",
    }),
    visibility = ["//visibility:public"],
)

# configure_make_variant(
#     name = "openssl_msvc",
#     build_data = [
#         "@nasm//:nasm",
#     ],
#     configure_command = "Configure",
#     configure_in_place = True,
#     configure_options = CONFIGURE_OPTIONS + [
#         "VC-WIN64A",
#         # Unset Microsoft Assembler (MASM) flags set by built-in MSVC toolchain,
#         # as NASM is unsed to build OpenSSL rather than MASM
#         "ASFLAGS=\" \"",
#     ],
#     configure_prefix = "$$PERL",
#     env = {
#         # The Zi flag must be set otherwise OpenSSL fails to build due to missing .pdb files
#         "CFLAGS": "-Zi",
#         # "PATH": "$$(dirname $(execpath @nasm//:nasm)):$$PATH",
#         # "PERL": "$$EXT_BUILD_ROOT$$/$(PERL)",
#     },
#     lib_name = LIB_NAME,
#     lib_source = ":srcs",
#     out_static_libs = [
#         "libssl.lib",
#         "libcrypto.lib",
#     ],
#     targets = MAKE_TARGETS,
#     toolchain = "@rules_foreign_cc//toolchains:preinstalled_nmake_toolchain",
#     # toolchains = ["@rules_perl//:current_toolchain"],
# )

configure_make(
    name = "openssl_default",
    configure_command = "config",
    configure_in_place = True,
    configure_options = CONFIGURE_OPTIONS,
    env = select({
        "@platforms//os:macos": {"AR": ""},
        "//conditions:default": {},
    }),
    lib_name = LIB_NAME,
    lib_source = ":srcs",
    # Note that for Linux builds, libssl must come before libcrypto on the linker command-line.
    # As such, libssl must be listed before libcrypto
    out_static_libs = [
        "libssl.a",
        "libcrypto.a",
    ],
    targets = MAKE_TARGETS,
)

filegroup(
    name = "gen_dir",
    srcs = [":openssl"],
    output_group = "gen_dir",
    visibility = ["//visibility:public"],
)
