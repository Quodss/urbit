load("@rules_cc//cc:defs.bzl", "cc_library")
# load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")

# filegroup(
#     name = "srcs",
#     srcs = glob(allow_empty = False,["**"]),
# )

# cmake(
#     name = "h2o",
#     cache_entries = {
#         "CMAKE_INSTALL_LIBDIR": "lib",
#         "CMAKE_C_COMPILER_FORCED": "on",

#         # FIXME: cmake things
#         "ZLIB_LIBRARY": "$EXT_BUILD_DEPS/zlib/lib/libz.a",
#         "ZLIB_INCLUDE_DIR": "$EXT_BUILD_DEPS/zlib/include",

#         # FIXME: cmake things
#         "LIBUV_VERSION": "1.44.1",
#         "LIBUV_LIBRARIES": "$EXT_BUILD_DEPS/uv/lib/libuv.a",
#         "LIBUV_INCLUDE_DIR": "$EXT_BUILD_DEPS/uv/include",

#         "OPENSSL_ROOT_DIR": "$EXT_BUILD_DEPS/openssl",
#         "CMAKE_PREFIX_PATH": "$EXT_BUILD_DEPS/zlib:$EXT_BUILD_DEPS/uv:${CMAKE_PREFIX_PATH:-}",
#     },
#     lib_source = ":srcs",
#     out_static_libs = select({
#         "@urbit//:windows-x86_64": ["libh2o.lib"],
#         "//conditions:default": ["libh2o.a"],
#     }),
#     # targets = ["libh2o", "install"],
#     visibility = ["//visibility:public"],
#     deps = [
#         "@openssl",
#         "@uv",
#         "@zlib",
#     ],
# )

filegroup(
    name = "srcs",
    srcs = glob(
        ["**"],
        allow_empty = False,
    ),
)

filegroup(
    name = "cifra-hdrs",
    srcs = [
        "deps/picotls/deps/cifra/src/aes.h",
        "deps/picotls/deps/cifra/src/bitops.h",
        "deps/picotls/deps/cifra/src/blockwise.h",
        "deps/picotls/deps/cifra/src/cf_config.h",
        "deps/picotls/deps/cifra/src/chash.h",
        "deps/picotls/deps/cifra/src/curve25519.h",
        "deps/picotls/deps/cifra/src/drbg.h",
        "deps/picotls/deps/cifra/src/ext/handy.h",
        "deps/picotls/deps/cifra/src/gf128.h",
        "deps/picotls/deps/cifra/src/hmac.h",
        "deps/picotls/deps/cifra/src/modes.h",
        "deps/picotls/deps/cifra/src/poly1305.h",
        "deps/picotls/deps/cifra/src/prp.h",
        "deps/picotls/deps/cifra/src/salsa20.h",
        "deps/picotls/deps/cifra/src/sha1.h",
        "deps/picotls/deps/cifra/src/sha2.h",
        "deps/picotls/deps/cifra/src/sha3.h",
        "deps/picotls/deps/cifra/src/tassert.h",
    ],
)

cc_library(
    name = "cifra",
    srcs = [
        ":cifra-hdrs",
        "deps/picotls/deps/cifra/src/aes.c",
        "deps/picotls/deps/cifra/src/blockwise.c",
        "deps/picotls/deps/cifra/src/chacha20.c",
        "deps/picotls/deps/cifra/src/chash.c",
        # "deps/picotls/deps/cifra/src/curve25519.c",
        "deps/picotls/deps/cifra/src/curve25519.tweetnacl.c",
        "deps/picotls/deps/cifra/src/drbg.c",
        "deps/picotls/deps/cifra/src/hmac.c",
        "deps/picotls/deps/cifra/src/gcm.c",
        "deps/picotls/deps/cifra/src/gf128.c",
        "deps/picotls/deps/cifra/src/modes.c",
        "deps/picotls/deps/cifra/src/poly1305.c",
        "deps/picotls/deps/cifra/src/sha256.c",
        "deps/picotls/deps/cifra/src/sha512.c",
    ],
    hdrs = [":cifra-hdrs"],
    includes = [
        "deps/picotls/deps/cifra/src",
        "deps/picotls/deps/cifra/src/ext",
    ],
)

cc_library(
    name = "micro-ecc",
    srcs = [
        "deps/picotls/deps/micro-ecc/curve-specific.inc",
        "deps/picotls/deps/micro-ecc/platform-specific.inc",
        "deps/picotls/deps/micro-ecc/types.h",
        "deps/picotls/deps/micro-ecc/uECC.c",
        "deps/picotls/deps/micro-ecc/uECC_vli.h",
    ],
    hdrs = ["deps/picotls/deps/micro-ecc/uECC.h"],
    includes = ["deps/picotls/deps/micro-ecc"],
)

cc_library(
    name = "picotls",
    srcs = [
        "deps/picotls/include/picotls/asn1.h",
        "deps/picotls/include/picotls/minicrypto.h",
        "deps/picotls/include/picotls/openssl.h",
        "deps/picotls/include/picotls/pembase64.h",
        "deps/picotls/lib/cifra.c",
        "deps/picotls/lib/openssl.c",
        "deps/picotls/lib/picotls.c",
        "deps/picotls/lib/uecc.c",
    ],
    hdrs = ["deps/picotls/include/picotls.h"],
    includes = ["deps/picotls/include"],
    deps = [
        ":cifra",
        ":micro-ecc",
        "@openssl",
    ],
)

cc_library(
    name = "picohttpparser",
    srcs = [
        "deps/picohttpparser/picohttpparser.c",
        "deps/picohttpparser/picohttpparser.h",
    ],
    hdrs = ["deps/picohttpparser/picohttpparser.h"],
    includes = ["deps/picohttpparser"],
)

cc_library(
    name = "libyrmcds",
    srcs = [
        "deps/libyrmcds/close.c",
        "deps/libyrmcds/connect.c",
        "deps/libyrmcds/recv.c",
        "deps/libyrmcds/send.c",
        "deps/libyrmcds/send_text.c",
        "deps/libyrmcds/socket.c",
        "deps/libyrmcds/strerror.c",
        "deps/libyrmcds/text_mode.c",
        "deps/libyrmcds/yrmcds.h",
        "deps/libyrmcds/yrmcds_portability.h",
        "deps/libyrmcds/yrmcds_text.h",
    ],
    hdrs = [
        "deps/libyrmcds/yrmcds.h",
    ],
    includes = ["deps/libyrmcds"],
)

cc_library(
    name = "libgkc",
    srcs = [
        "deps/libgkc/gkc.c",
        "deps/libgkc/gkc.h",
    ],
    hdrs = ["deps/libgkc/gkc.h"],
    includes = ["deps/libgkc"],
)

cc_library(
    name = "cloexec",
    srcs = [
        "deps/cloexec/cloexec.c",
        "deps/cloexec/cloexec.h",
    ],
    hdrs = ["deps/cloexec/cloexec.h"],
    includes = ["deps/cloexec"],
)

cc_library(
    name = "klib",
    hdrs = [
        "deps/klib/khash.h",
    ],
    includes = ["deps/klib"],
)

cc_library(
    name = "yaml",
    srcs = [
        "deps/yaml/src/api.c",
        "deps/yaml/src/dumper.c",
        "deps/yaml/src/emitter.c",
        "deps/yaml/src/loader.c",
        "deps/yaml/src/parser.c",
        "deps/yaml/src/reader.c",
        "deps/yaml/src/scanner.c",
        "deps/yaml/src/writer.c",
        "deps/yaml/src/yaml_private.h",
    ],
    hdrs = ["deps/yaml/include/yaml.h"],
    includes = ["deps/yaml/include"],
)

cc_library(
    name = "yoml",
    hdrs = [
        "deps/yoml/yoml.h",
        "deps/yoml/yoml-parser.h",
    ],
    includes = ["deps/yoml"],
)

cc_library(
    name = "golombset",
    hdrs = [
        "deps/golombset/golombset.h",
    ],
    includes = ["deps/golombset"],
)

cc_library(
    name = "ssl-conservatory",
    srcs = ["deps/ssl-conservatory/openssl/openssl_hostname_validation.c"],
    hdrs = ["deps/ssl-conservatory/openssl/openssl_hostname_validation.h"],
    includes = ["deps/ssl-conservatory/openssl"],
    deps = ["@openssl"],
)

cc_library(
    name = "h2o",
    srcs = glob(
        include = [
            "include/**/*.h",
            "lib/**/*.h",
            "lib/**/*.c",
        ],
        allow_empty = False,
        exclude = [
            "lib/websocket.c",
            "lib/handler/compress/brotli.c",
            "lib/handler/configurator/mruby.c",
            "lib/handler/mruby.c",
            "lib/handler/mruby/*.c",
        ],
    ),
    hdrs = ["include/h2o.h"],
    copts = select({
        "@urbit//:macos": [],
        "//conditions:default": ["-pthread"],
    }),
    includes = [
        "deps/ssl-conservatory/openssl",
        "include",
    ],
    local_defines = [
        "H2O_HTTP1",
        "H2O_HTTP2",
        "H2O_USE_PIOCOTLS",
        "H2O_USE_LIBUV",
    ] + select({
        "@urbit//:linux": ["_GNU_SOURCE"],
        "//conditions:default": [],
    }),
    textual_hdrs = [
        "deps/ssl-conservatory/openssl/openssl_hostname_validation.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":cloexec",
        ":golombset",
        ":klib",
        ":libgkc",
        ":libyrmcds",
        ":picohttpparser",
        ":picotls",
        ":ssl-conservatory",
        ":yaml",
        ":yoml",
        "@openssl",
        "@uv",
        "@zlib",
    ],
)
