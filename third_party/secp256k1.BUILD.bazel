load("@rules_cc//cc:defs.bzl", "cc_library")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")

# filegroup(
#     name = "srcs",
#     srcs = glob(["**"]),
# )

# configure_make(
#     name = "secp256k1",
#     visibility = ["//visibility:public"],
#     autogen = True,
#     configure_in_place = True,
#     lib_source = ":srcs",
#     lib_name = "libsecp256k1",
#     configure_options = [
#         "--enable-module-extrakeys",
#         "--enable-module-recovery",
#         "--enable-module-schnorrsig",
#         "--host"
#     ],
# )

# if USE_EXTERNAL_ASM
# if USE_ASM_ARM
# libsecp256k1_common_la_SOURCES = src/asm/field_10x26_arm.s
# endif
# endif

# PRECOMPUTED_LIB = libsecp256k1_precomputed.la
# noinst_LTLIBRARIES = $(PRECOMPUTED_LIB)
# libsecp256k1_precomputed_la_SOURCES =  src/precomputed_ecmult.c src/precomputed_ecmult_gen.c
# libsecp256k1_precomputed_la_CPPFLAGS = $(SECP_INCLUDES)

genrule(
    name = "libsecp256k1-config",
    outs = ["include/libsecp256k1-config.h"],
    cmd = """
cat <<EOF >$@
#ifndef LIBSECP256K1_CONFIG_H
#define LIBSECP256K1_CONFIG_H

/* Define this symbol to compile out all VERIFY code */
/* #undef COVERAGE */

/* Set ecmult gen precision bits */
#define ECMULT_GEN_PREC_BITS 4

/* Set window size for ecmult precomputation */
#define ECMULT_WINDOW_SIZE 15

/* Define this symbol to enable the ECDH module */
/* #undef ENABLE_MODULE_ECDH */

/* Define this symbol to enable the extrakeys module */
/* #undef ENABLE_MODULE_EXTRAKEYS */

/* Define this symbol to enable the ECDSA pubkey recovery module */
/* #undef ENABLE_MODULE_RECOVERY */

/* Define this symbol to enable the schnorrsig module */
/* #undef ENABLE_MODULE_SCHNORRSIG */

/* Define to 1 if you have the <dlfcn.h> header file. */
#define HAVE_DLFCN_H 1

/* Define to 1 if you have the <inttypes.h> header file. */
#define HAVE_INTTYPES_H 1

/* Define to 1 if you have the <stdint.h> header file. */
#define HAVE_STDINT_H 1

/* Define to 1 if you have the <stdio.h> header file. */
#define HAVE_STDIO_H 1

/* Define to 1 if you have the <stdlib.h> header file. */
#define HAVE_STDLIB_H 1

/* Define to 1 if you have the <strings.h> header file. */
#define HAVE_STRINGS_H 1

/* Define to 1 if you have the <string.h> header file. */
#define HAVE_STRING_H 1

/* Define to 1 if you have the <sys/stat.h> header file. */
#define HAVE_SYS_STAT_H 1

/* Define to 1 if you have the <sys/types.h> header file. */
#define HAVE_SYS_TYPES_H 1

/* Define to 1 if you have the <unistd.h> header file. */
#define HAVE_UNISTD_H 1

/* Define this symbol if valgrind is installed, and it supports the host
   platform */
/* #undef HAVE_VALGRIND */

/* Define to the sub-directory where libtool stores uninstalled libraries. */
#define LT_OBJDIR ".libs/"

/* Name of package */
#define PACKAGE "libsecp256k1"

/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT "https://github.com/bitcoin-core/secp256k1/issues"

/* Define to the full name of this package. */
#define PACKAGE_NAME "libsecp256k1"

/* Define to the full name and version of this package. */
#define PACKAGE_STRING "libsecp256k1 0.1.0-pre"

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "libsecp256k1"

/* Define to the home page for this package. */
#define PACKAGE_URL "https://github.com/bitcoin-core/secp256k1"

/* Define to the version of this package. */
#define PACKAGE_VERSION "0.1.0-pre"

/* Define to 1 if all of the C90 standard headers exist (not just the ones
   required in a freestanding environment). This macro is provided for
   backward compatibility; new code need not use it. */
#define STDC_HEADERS 1

/* Define this symbol to enable x86_64 assembly optimizations */
#define USE_ASM_X86_64 1

/* Define this symbol if an external (non-inline) assembly implementation is
   used */
/* #undef USE_EXTERNAL_ASM */

/* Define this symbol if an external implementation of the default callbacks
   is used */
/* #undef USE_EXTERNAL_DEFAULT_CALLBACKS */

/* Define this symbol to force the use of the (unsigned) __int128 based wide
   multiplication implementation */
/* #undef USE_FORCE_WIDEMUL_INT128 */

/* Define this symbol to force the use of the (u)int64_t based wide
   multiplication implementation */
/* #undef USE_FORCE_WIDEMUL_INT64 */

/* Version number of package */
#define VERSION "0.1.0-pre"

#endif /*LIBSECP256K1_CONFIG_H*/
"""
)

# /* Define this symbol to enable x86_64 assembly optimizations */
# #define USE_ASM_X86_64 1

cc_library(
    name = "secp256k1",
    srcs = [
        ":include/libsecp256k1-config.h",
        "src/scalar.h",
        "src/scalar_4x64.h",
        "src/scalar_8x32.h",
        "src/scalar_low.h",
        "src/scalar_impl.h",
        "src/scalar_4x64_impl.h",
        "src/scalar_8x32_impl.h",
        "src/scalar_low_impl.h",
        "src/group.h",
        "src/group_impl.h",
        "src/ecdsa.h",
        "src/ecdsa_impl.h",
        "src/eckey.h",
        "src/eckey_impl.h",
        "src/ecmult.h",
        "src/ecmult_impl.h",
        "src/ecmult_compute_table.h",
        "src/ecmult_compute_table_impl.h",
        "src/ecmult_const.h",
        "src/ecmult_const_impl.h",
        "src/ecmult_gen.h",
        "src/ecmult_gen_impl.h",
        "src/ecmult_gen_compute_table.h",
        "src/ecmult_gen_compute_table_impl.h",
        "src/field_10x26.h",
        "src/field_10x26_impl.h",
        "src/field_5x52.h",
        "src/field_5x52_impl.h",
        "src/field_5x52_int128_impl.h",
        "src/field_5x52_asm_impl.h",
        "src/modinv32.h",
        "src/modinv32_impl.h",
        "src/modinv64.h",
        "src/modinv64_impl.h",
        "src/precomputed_ecmult.h",
        "src/precomputed_ecmult_gen.h",
        "src/assumptions.h",
        "src/util.h",
        "src/scratch.h",
        "src/scratch_impl.h",
        "src/selftest.h",
        "src/testrand.h",
        "src/testrand_impl.h",
        "src/hash.h",
        "src/hash_impl.h",
        "src/field.h",
        "src/field_impl.h",
        "src/bench.h",
        "src/basic-config.h",
        "contrib/lax_der_parsing.h",
        "contrib/lax_der_privatekey_parsing.h",
        "src/modules/extrakeys/main_impl.h",
        "src/modules/schnorrsig/main_impl.h",
        "src/modules/recovery/main_impl.h",
    ] + [
        "contrib/lax_der_parsing.c",
        "contrib/lax_der_privatekey_parsing.c",
        "src/precomputed_ecmult.c",
        "src/precomputed_ecmult_gen.c",
        "src/secp256k1.c",
    ],
    hdrs = [
        "include/secp256k1.h",
        "include/secp256k1_preallocated.h",
        "include/secp256k1_extrakeys.h",
        "include/secp256k1_schnorrsig.h",
        "include/secp256k1_recovery.h",
    ],
    includes = ["include"],
    local_defines = [
        "ECMULT_GEN_PREC_BITS=4",
        "ECMULT_WINDOW_SIZE=15",
        "ENABLE_MODULE_EXTRAKEYS",
        "ENABLE_MODULE_RECOVERY",
        "ENABLE_MODULE_SCHNORRSIG",
    ],
    visibility = ["//visibility:public"],
)
